TEST RESULTS FOR ASSIGNMENT3:

Running 'unittest1.c': 
Testing scoreFor() function:
scoreFor(): FAIL when testing 1 of each scoring card in deck, hand, discard == 33
scoreFor(): PASS when testing 3 x (curse), 2 x (duchy, estate), great hall, gardens  == 6
scoreFor(): PASS when testing 10 curses  == -10
scoreFor(): PASS when testing hand  == 13
TEST FAILED
File 'dominion.c'
Lines executed:6.43% of 560
Creating 'dominion.c.gcov'

Running 'unittest2.c': 
Testing getCost() function:
getCost(): PASS when testing curse == 0.
getCost(): PASS when testing estate == 2.
getCost(): PASS when testing duchy == 5.
getCost(): PASS when testing province == 8.
getCost(): PASS when testing copper == 0.
getCost(): PASS when testing silver == 3.
getCost(): PASS when testing gold == 6.
getCost(): PASS when testing adventurer == 6.
getCost(): PASS when testing council_room == 5.
getCost(): PASS when testing feast == 4.
getCost(): PASS when testing gardens == 4.
getCost(): PASS when testing mine == 5.
getCost(): PASS when testing remodel == 4.
getCost(): PASS when testing smithy == 4.
getCost(): PASS when testing village == 3.
getCost(): PASS when testing baron == 4.
getCost(): PASS when testing great_hall == 3.
getCost(): PASS when testing minion == 5.
getCost(): PASS when testing steward == 3.
getCost(): PASS when testing tribute == 5.
getCost(): PASS when testing ambassador == 3.
getCost(): PASS when testing cutpurse == 4.
getCost(): PASS when testing embargo == 2.
getCost(): PASS when testing outpost == 5.
getCost(): PASS when testing salvager == 4.
getCost(): PASS when testing sea_hag == 4.
getCost(): PASS when testing treasure_map == 4.
TEST SUCCESSFUL
File 'dominion.c'
Lines executed:5.18% of 560
Creating 'dominion.c.gcov'

Running 'unittest3.c': 
Testing buyCard() function:
buyCard():  PASS no buys available
buyCard():  PASS supplyCount == 0, cannot buy
buyCard():  PASS not enough coins to buy, cannot buy
buyCard():  PASS bought smithy and successfully added to discard
buyCard():  PASS coins deducted correctly from available amt
buyCard():  PASS user buys deducted correctly
TEST SUCCESSFUL
File 'dominion.c'
Lines executed:5.00% of 560
Creating 'dominion.c.gcov'

Running 'unittest4.c': 
Testing function shuffle():
shuffle():  PASS cannot shuffle an empty deck
shuffle():  PASS cards were shuffled into a different order
shuffle():  PASS deckCount was not affected by shuffle
TEST SUCCESSFUL
File 'dominion.c'
Lines executed:4.11% of 560
Creating 'dominion.c.gcov'

Running 'cardtest1.c': 
Testing Smithy card:
Smithy:  PASS net +2 cards added to hand (added 3, discard 1)
Smithy:  PASS 3 cards removed from player's deck
Smithy:  PASS Smithy was removed from player's hand
Smithy:  FAIL Smithy added to discard pile
Smithy:  PASS Smithy exited with result of 0
TEST FAILURE
File 'dominion.c'
Lines executed:7.14% of 560
Creating 'dominion.c.gcov'

Running 'cardtest2.c': 
Testing Adventurer card:
FAIL Adventurer card added correct amount of cards to hand
FAIL Adventurer card added two treasure cards to hand
FAIL Adventurer card discarded correct amt of cards
PASS Adventurer card returns 0
TEST FAILURE
File 'dominion.c'
Lines executed:10.00% of 560
Creating 'dominion.c.gcov'

Running 'cardtest3.c': 
Testing Mine card:
Mine PASS user tried to trash a non-treasure card
Mine FAIL tried to pick up a non-treasure card
Mine FAIL tried to purchase treasure card too expensive
Mine FAIL added treasure card successfully to hand
Mine FAIL added card successfully to discard
Mine PASS Mine card returns 0
TEST FAILURE
File 'dominion.c'
Lines executed:8.93% of 560
Creating 'dominion.c.gcov'

Running 'cardtest4.c': 
Testing Remodel card:
Remodel FAIL user can't trade for card of cost > 2
Remodel FAIL card successfully added to user hand
Remodel FAIL trashed card disposed of properly
Remodel FAIL card returns 0, returns -1
TEST FAILURE
File 'dominion.c'
Lines executed:8.39% of 560
Creating 'dominion.c.gcov'

