        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:
        -:   22://Takes enums of card and places in kingdom card pos
        -:   23://returns array
    #####:   24:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   25:		  int k8, int k9, int k10) {
    #####:   26:  int* k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
    #####:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:		   struct gameState *state) {
        -:   42:
        -:   43:  int i;
        -:   44:  int j;
        -:   45:  int it;			
        -:   46:  //set up random number generator
    #####:   47:  SelectStream(1);
    #####:   48:  PutSeed((long)randomSeed);
        -:   49:  
        -:   50:  //check number of players
    #####:   51:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   52:    {
    #####:   53:      return -1;
        -:   54:    }
        -:   55:
        -:   56:  //set number of players
    #####:   57:  state->numPlayers = numPlayers;
        -:   58:
        -:   59:  //check selected kingdom cards are different
    #####:   60:  for (i = 0; i < 10; i++)
        -:   61:    {
    #####:   62:      for (j = 0; j < 10; j++)
        -:   63:        {
    #####:   64:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   65:	    {
    #####:   66:	      return -1;
        -:   67:	    }
        -:   68:        }
        -:   69:    }
        -:   70:
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
    #####:   76:  if (numPlayers == 2)
        -:   77:    {
    #####:   78:      state->supplyCount[curse] = 10;
        -:   79:    }
    #####:   80:  else if (numPlayers == 3)
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 20;
        -:   83:    }
        -:   84:  else
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 30;
        -:   87:    }
        -:   88:
        -:   89:  //set number of Victory cards
    #####:   90:  if (numPlayers == 2)
        -:   91:    {
    #####:   92:      state->supplyCount[estate] = 8;
    #####:   93:      state->supplyCount[duchy] = 8;
    #####:   94:      state->supplyCount[province] = 8;
        -:   95:    }
        -:   96:  else
        -:   97:    {
    #####:   98:      state->supplyCount[estate] = 12;
    #####:   99:      state->supplyCount[duchy] = 12;
    #####:  100:      state->supplyCount[province] = 12;
        -:  101:    }
        -:  102:
        -:  103:  //set number of Treasure cards
    #####:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  105:  state->supplyCount[silver] = 40;
    #####:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
    #####:  109:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  110:    {
    #####:  111:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  112:	{
    #####:  113:	  if (kingdomCards[j] == i)
        -:  114:	    {
        -:  115:	      //check if card is a 'Victory' Kingdom card
    #####:  116:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:		{
    #####:  118:		  if (numPlayers == 2){ 
    #####:  119:		    state->supplyCount[i] = 8; 
        -:  120:		  }
    #####:  121:		  else{ state->supplyCount[i] = 12; }
        -:  122:		}
        -:  123:	      else
        -:  124:		{
    #####:  125:		  state->supplyCount[i] = 10;
        -:  126:		}
    #####:  127:	      break;
        -:  128:	    }
        -:  129:	  else    //card is not in the set choosen for the game
        -:  130:	    {
    #####:  131:	      state->supplyCount[i] = -1;
        -:  132:	    }
        -:  133:	}
        -:  134:
        -:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
    #####:  141:  for (i = 0; i < numPlayers; i++)
        -:  142:    {
    #####:  143:      state->deckCount[i] = 0;
    #####:  144:      for (j = 0; j < 3; j++)
        -:  145:	{
    #####:  146:	  state->deck[i][j] = estate;
    #####:  147:	  state->deckCount[i]++;
        -:  148:	}
    #####:  149:      for (j = 3; j < 10; j++)
        -:  150:	{
    #####:  151:	  state->deck[i][j] = copper;
    #####:  152:	  state->deckCount[i]++;		
        -:  153:	}
        -:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
    #####:  157:  for (i = 0; i < numPlayers; i++)
        -:  158:    {
    #####:  159:      if ( shuffle(i, state) < 0 )
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        -:  163:    }
        -:  164:
        -:  165:  //draw player hands
    #####:  166:  for (i = 0; i < numPlayers; i++)
        -:  167:    {  
        -:  168:      //initialize hand size to zero
    #####:  169:      state->handCount[i] = 0;
    #####:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        -:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
    #####:  179:  for (i = 0; i <= treasure_map; i++)
        -:  180:    {
    #####:  181:      state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
    #####:  185:  state->outpostPlayed = 0;
    #####:  186:  state->phase = 0;
    #####:  187:  state->numActions = 1;
    #####:  188:  state->numBuys = 1;
    #####:  189:  state->playedCardCount = 0;
    #####:  190:  state->whoseTurn = 0;
    #####:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  195:  for (it = 0; it < 5; it++){
    #####:  196:    drawCard(state->whoseTurn, state);
        -:  197:  }
        -:  198:
    #####:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
    #####:  201:  return 0;
        -:  202:}
        -:  203:
    #####:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
    #####:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
    #####:  212:  if (state->deckCount[player] < 1)
    #####:  213:    return -1;
    #####:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    #####:  217:  while (state->deckCount[player] > 0) {
    #####:  218:    card = floor(Random() * state->deckCount[player]);
    #####:  219:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  220:    newDeckPos++;
    #####:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
    #####:  224:    state->deckCount[player]--;
        -:  225:  }
    #####:  226:  for (i = 0; i < newDeckPos; i++) {
    #####:  227:    state->deck[player][i] = newDeck[i];
    #####:  228:    state->deckCount[player]++;
        -:  229:  }
        -:  230:
    #####:  231:  return 0;
        -:  232:}
        -:  233:
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
        -:  273:}
        -:  274:
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276: 
        -:  277:
        -:  278:  //ASSUMPTION BASED ON gainCard() -> "Note: supplyPos is enum of choosen card"
        -:  279: 
        -:  280:int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
        1:  327:int supplyCount(int card, struct gameState *state) {
        1:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
        2:  353:int whoseTurn(struct gameState *state) {
        2:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
    #####:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
        -:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
        -:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
        -:  492:	}
        -:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
        -:  503:	}
        -:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
        -:  513:	}
        -:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
        -:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
        -:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
    #####:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
    #####:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
    #####:  541:    for (i = 0; i < state->discardCount[player];i++){
    #####:  542:      state->deck[player][i] = state->discard[player][i];
    #####:  543:      state->discard[player][i] = -1;
        -:  544:    }
        -:  545:
    #####:  546:    state->deckCount[player] = state->discardCount[player];
    #####:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
    #####:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
    #####:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
    #####:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
    #####:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
    #####:  567:    if (deckCounter == 0)
    #####:  568:      return -1;
        -:  569:
    #####:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  571:    state->deckCount[player]--;
    #####:  572:    state->handCount[player]++;//Increment hand count
        -:  573:  }
        -:  574:
        -:  575:  else{
    #####:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
    #####:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  584:    state->deckCount[player]--;
    #####:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
    #####:  588:  return 0;
        -:  589:}
        -:  590:
        4:  591:int getCost(int cardNumber)
        -:  592:{
        4:  593:  switch( cardNumber ) 
        -:  594:    {
        -:  595:    case curse:
    #####:  596:      return 0;
        -:  597:    case estate:
    #####:  598:      return 2;
        -:  599:    case duchy:
    #####:  600:      return 5;
        -:  601:    case province:
    #####:  602:      return 8;
        -:  603:    case copper:
        1:  604:      return 0;
        -:  605:    case silver:
    #####:  606:      return 3;
        -:  607:    case gold:
    #####:  608:      return 6;
        -:  609:    case adventurer:
    #####:  610:      return 6;
        -:  611:    case council_room:
    #####:  612:      return 5;
        -:  613:    case feast:
    #####:  614:      return 4;
        -:  615:    case gardens:
        1:  616:      return 4;
        -:  617:    case mine:
    #####:  618:      return 5;
        -:  619:    case remodel:
    #####:  620:      return 4;
        -:  621:    case smithy:
        2:  622:      return 4;
        -:  623:    case village:
    #####:  624:      return 3;
        -:  625:    case baron:
    #####:  626:      return 4;
        -:  627:    case great_hall:
    #####:  628:      return 3;
        -:  629:    case minion:
    #####:  630:      return 5;
        -:  631:    case steward:
    #####:  632:      return 3;
        -:  633:    case tribute:
    #####:  634:      return 5;
        -:  635:    case ambassador:
    #####:  636:      return 3;
        -:  637:    case cutpurse:
    #####:  638:      return 4;
        -:  639:    case embargo: 
    #####:  640:      return 2;
        -:  641:    case outpost:
    #####:  642:      return 5;
        -:  643:    case salvager:
    #####:  644:      return 4;
        -:  645:    case sea_hag:
    #####:  646:      return 4;
        -:  647:    case treasure_map:
    #####:  648:      return 4;
        -:  649:    }
        -:  650:	
    #####:  651:  return -1;
        -:  652:}
        -:  653:
        2:  654:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  655:{
        -:  656:  int i;
        -:  657:  int j;
        -:  658:  int k;
        -:  659:  //int x;
        -:  660:  int index;
        2:  661:  int currentPlayer = whoseTurn(state);
        2:  662:  int nextPlayer = currentPlayer + 1;
        2:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664://  int temphand[MAX_HAND];// moved above the if statement
        -:  665://  int drawntreasure=0;
        -:  666://  int cardDrawn;
        -:  667://  int z = 0;// this is the counter for the temp hand
        2:  668:  if (nextPlayer > (state->numPlayers - 1)){
        2:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:
        -:  672:	//*****************************ASSIGNMENT 2 **********************************
        -:  673:
        -:  674:	//I am using function pointers to make it look a little more elegant
        -:  675:	//used as resource: https://www.cprogramming.com/tutorial/function-pointers.html
        -:  676:	int (*cardAction)(int, struct gameState *, int, int);
        -:  677:
        -:  678:	//Assign odd number so we know if changed
        -:  679:	int actionResult;
        -:  680:	
        -:  681:	//Two arrays, one holding the cards' ENUM, the second a corresponding function pointer
        2:  682:	int actionCard[] = {7, 8, 9, 10, 13};
        2:  683:	void * actionFunction[] = { &adventurerAction, &council_roomAction, &feastAction, &gardensAction, &smithyAction};
        -:  684:
        -:  685:	//Iterate over actionCard array and see if our card is present
        -:  686:	//If so, run corresponding function from actionFunction and set to actionResult
        -:  687:		// then return actionResult
       12:  688:	for( i = 0; i < 5; i++) {
        -:  689:		
       10:  690:		if( card == actionCard[i] ) {
        -:  691:			
    #####:  692:			cardAction = actionFunction[i];
    #####:  693:			actionResult = cardAction(currentPlayer, state, handPos, choice1);
    #####:  694:			return actionResult;
        -:  695:		}
        -:  696:
        -:  697:	}
        -:  698:
        -:  699:	//*********************************************************************************	
        -:  700:
        -:  701:
        -:  702:  //uses switch to select card and perform actions
        2:  703:  switch( card ) 
        -:  704:    {
        -:  705:   
        -:  706:     case mine:
    #####:  707:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  708:
    #####:  709:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  710:	{
    #####:  711:	  return -1;
        -:  712:	}
        -:  713:		
    #####:  714:      if (choice2 > treasure_map || choice2 < curse)
        -:  715:	{
    #####:  716:	  return -1;
        -:  717:	}
        -:  718:
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  720:	{
    #####:  721:	  return -1;
        -:  722:	}
        -:  723:
    #####:  724:      gainCard(choice2, state, 2, currentPlayer);
        -:  725:
        -:  726:      //discard card from hand
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);			
    #####:  735:	      break;
        -:  736:	    }
        -:  737:	}
        -:  738:			
    #####:  739:      return 0;
        -:  740:			
        -:  741:    case remodel:
        2:  742:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
        2:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:	{
        1:  746:	  return -1;
        -:  747:	}
        -:  748:
        1:  749:      gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
        1:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
        1:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
        1:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
        1:  759:	      discardCard(i, currentPlayer, state, 0);			
        1:  760:	      break;
        -:  761:	    }
        -:  762:	}
        -:  763:
        -:  764:
        1:  765:      return 0;
        -:  766:		
        -:  767:		
        -:  768:    case village:
        -:  769:      //+1 Card
    #####:  770:      drawCard(currentPlayer, state);
        -:  771:			
        -:  772:      //+2 Actions
    #####:  773:      state->numActions = state->numActions + 2;
        -:  774:			
        -:  775:      //discard played card from hand
    #####:  776:      discardCard(handPos, currentPlayer, state, 0);
    #####:  777:      return 0;
        -:  778:		
        -:  779:    case baron:
    #####:  780:      state->numBuys++;//Increase buys by 1!
    #####:  781:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  782:	int p = 0;//Iterator for hand!
    #####:  783:	int card_not_discarded = 1;//Flag for discard set!
    #####:  784:	while(card_not_discarded){
    #####:  785:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  786:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  787:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  788:	    state->discardCount[currentPlayer]++;
    #####:  789:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  790:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  791:	    }
    #####:  792:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  793:	    state->handCount[currentPlayer]--;
    #####:  794:	    card_not_discarded = 0;//Exit the loop
        -:  795:	  }
    #####:  796:	  else if (p > state->handCount[currentPlayer]){
        -:  797:	    if(DEBUG) {
        -:  798:	      printf("No estate cards in your hand, invalid choice\n");
        -:  799:	      printf("Must gain an estate if there are any\n");
        -:  800:	    }
    #####:  801:	    if (supplyCount(estate, state) > 0){
    #####:  802:	      gainCard(estate, state, 0, currentPlayer);
    #####:  803:	      state->supplyCount[estate]--;//Decrement estates
    #####:  804:	      if (supplyCount(estate, state) == 0){
    #####:  805:		isGameOver(state);
        -:  806:	      }
        -:  807:	    }
    #####:  808:	    card_not_discarded = 0;//Exit the loop
        -:  809:	  }
        -:  810:			    
        -:  811:	  else{
    #####:  812:	    p++;//Next card
        -:  813:	  }
        -:  814:	}
        -:  815:      }
        -:  816:			    
        -:  817:      else{
    #####:  818:	if (supplyCount(estate, state) > 0){
    #####:  819:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  820:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  821:	  if (supplyCount(estate, state) == 0){
    #####:  822:	    isGameOver(state);
        -:  823:	  }
        -:  824:	}
        -:  825:      }
        -:  826:	    
        -:  827:      
    #####:  828:      return 0;
        -:  829:		
        -:  830:    case great_hall:
        -:  831:      //+1 Card
    #####:  832:      drawCard(currentPlayer, state);
        -:  833:			
        -:  834:      //+1 Actions
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
    #####:  839:      return 0;
        -:  840:		
        -:  841:    case minion:
        -:  842:      //+1 action
    #####:  843:      state->numActions++;
        -:  844:			
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:			
    #####:  848:      if (choice1)		//+2 coins
        -:  849:	{
    #####:  850:	  state->coins = state->coins + 2;
        -:  851:	}
        -:  852:			
    #####:  853:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  854:	{
        -:  855:	  //discard hand
    #####:  856:	  while(numHandCards(state) > 0)
        -:  857:	    {
    #####:  858:	      discardCard(handPos, currentPlayer, state, 0);
        -:  859:	    }
        -:  860:				
        -:  861:	  //draw 4
    #####:  862:	  for (i = 0; i < 4; i++)
        -:  863:	    {
    #####:  864:	      drawCard(currentPlayer, state);
        -:  865:	    }
        -:  866:				
        -:  867:	  //other players discard hand and redraw if hand size > 4
    #####:  868:	  for (i = 0; i < state->numPlayers; i++)
        -:  869:	    {
    #####:  870:	      if (i != currentPlayer)
        -:  871:		{
    #####:  872:		  if ( state->handCount[i] > 4 )
        -:  873:		    {
        -:  874:		      //discard hand
    #####:  875:		      while( state->handCount[i] > 0 )
        -:  876:			{
    #####:  877:			  discardCard(handPos, i, state, 0);
        -:  878:			}
        -:  879:							
        -:  880:		      //draw 4
    #####:  881:		      for (j = 0; j < 4; j++)
        -:  882:			{
    #####:  883:			  drawCard(i, state);
        -:  884:			}
        -:  885:		    }
        -:  886:		}
        -:  887:	    }
        -:  888:				
        -:  889:	}
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case steward:
    #####:  893:      if (choice1 == 1)
        -:  894:	{
        -:  895:	  //+2 cards
    #####:  896:	  drawCard(currentPlayer, state);
    #####:  897:	  drawCard(currentPlayer, state);
        -:  898:	}
    #####:  899:      else if (choice1 == 2)
        -:  900:	{
        -:  901:	  //+2 coins
    #####:  902:	  state->coins = state->coins + 2;
        -:  903:	}
        -:  904:      else
        -:  905:	{
        -:  906:	  //trash 2 cards in hand
    #####:  907:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  908:	  discardCard(choice3, currentPlayer, state, 1);
        -:  909:	}
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case tribute:
    #####:  916:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  917:	if (state->deckCount[nextPlayer] > 0){
    #####:  918:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	  state->deckCount[nextPlayer]--;
        -:  920:	}
    #####:  921:	else if (state->discardCount[nextPlayer] > 0){
    #####:  922:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  923:	  state->discardCount[nextPlayer]--;
        -:  924:	}
        -:  925:	else{
        -:  926:	  //No Card to Reveal
        -:  927:	  if (DEBUG){
        -:  928:	    printf("No cards to reveal\n");
        -:  929:	  }
        -:  930:	}
        -:  931:      }
        -:  932:	    
        -:  933:      else{
    #####:  934:	if (state->deckCount[nextPlayer] == 0){
    #####:  935:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  936:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  937:	    state->deckCount[nextPlayer]++;
    #####:  938:	    state->discard[nextPlayer][i] = -1;
    #####:  939:	    state->discardCount[nextPlayer]--;
        -:  940:	  }
        -:  941:			    
    #####:  942:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  943:	} 
    #####:  944:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  946:	state->deckCount[nextPlayer]--;
    #####:  947:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  948:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  949:	state->deckCount[nextPlayer]--;
        -:  950:      }    
        -:  951:		       
    #####:  952:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  953:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  954:	state->playedCardCount++;
    #####:  955:	tributeRevealedCards[1] = -1;
        -:  956:      }
        -:  957:
    #####:  958:      for (i = 0; i <= 2; i ++){
    #####:  959:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  960:	  state->coins += 2;
        -:  961:	}
        -:  962:		    
    #####:  963:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  964:	  drawCard(currentPlayer, state);
    #####:  965:	  drawCard(currentPlayer, state);
        -:  966:	}
        -:  967:	else{//Action Card
    #####:  968:	  state->numActions = state->numActions + 2;
        -:  969:	}
        -:  970:      }
        -:  971:	    
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case ambassador:
    #####:  975:      j = 0;		//used to check if player has enough cards to discard
        -:  976:
    #####:  977:      if (choice2 > 2 || choice2 < 0)
        -:  978:	{
    #####:  979:	  return -1;				
        -:  980:	}
        -:  981:
    #####:  982:      if (choice1 == handPos)
        -:  983:	{
    #####:  984:	  return -1;
        -:  985:	}
        -:  986:
    #####:  987:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  988:	{
    #####:  989:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  990:	    {
    #####:  991:	      j++;
        -:  992:	    }
        -:  993:	}
    #####:  994:      if (j < choice2)
        -:  995:	{
    #####:  996:	  return -1;				
        -:  997:	}
        -:  998:
        -:  999:      if (DEBUG) 
        -: 1000:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1001:
        -: 1002:      //increase supply count for choosen card by amount being discarded
    #####: 1003:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1004:			
        -: 1005:      //each other player gains a copy of revealed card
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1011:	    }
        -: 1012:	}
        -: 1013:
        -: 1014:      //discard played card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1016:
        -: 1017:      //trash copies of cards returned to supply
    #####: 1018:      for (j = 0; j < choice2; j++)
        -: 1019:	{
    #####: 1020:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1021:	    {
    #####: 1022:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1023:		{
    #####: 1024:		  discardCard(i, currentPlayer, state, 1);
    #####: 1025:		  break;
        -: 1026:		}
        -: 1027:	    }
        -: 1028:	}			
        -: 1029:
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case cutpurse:
        -: 1033:
    #####: 1034:      updateCoins(currentPlayer, state, 2);
    #####: 1035:      for (i = 0; i < state->numPlayers; i++)
        -: 1036:	{
    #####: 1037:	  if (i != currentPlayer)
        -: 1038:	    {
    #####: 1039:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1040:		{
    #####: 1041:		  if (state->hand[i][j] == copper)
        -: 1042:		    {
    #####: 1043:		      discardCard(j, i, state, 0);
    #####: 1044:		      break;
        -: 1045:		    }
    #####: 1046:		  if (j == state->handCount[i])
        -: 1047:		    {
    #####: 1048:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1049:			{
        -: 1050:			  if (DEBUG)
        -: 1051:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1052:			}	
    #####: 1053:		      break;
        -: 1054:		    }		
        -: 1055:		}
        -: 1056:					
        -: 1057:	    }
        -: 1058:				
        -: 1059:	}				
        -: 1060:
        -: 1061:      //discard played card from hand
    #####: 1062:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1063:
    #####: 1064:      return 0;
        -: 1065:
        -: 1066:		
        -: 1067:    case embargo: 
        -: 1068:      //+2 Coins
    #####: 1069:      state->coins = state->coins + 2;
        -: 1070:			
        -: 1071:      //see if selected pile is in play
    #####: 1072:      if ( state->supplyCount[choice1] == -1 )
        -: 1073:	{
    #####: 1074:	  return -1;
        -: 1075:	}
        -: 1076:			
        -: 1077:      //add embargo token to selected supply pile
    #####: 1078:      state->embargoTokens[choice1]++;
        -: 1079:			
        -: 1080:      //trash card
    #####: 1081:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case outpost:
        -: 1085:      //set outpost flag
    #####: 1086:      state->outpostPlayed++;
        -: 1087:			
        -: 1088:      //discard card
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case salvager:
        -: 1093:      //+1 buy
    #####: 1094:      state->numBuys++;
        -: 1095:			
    #####: 1096:      if (choice1)
        -: 1097:	{
        -: 1098:	  //gain coins equal to trashed card
    #####: 1099:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1100:	  //trash card
    #####: 1101:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1102:	}
        -: 1103:			
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case sea_hag:
    #####: 1109:      for (i = 0; i < state->numPlayers; i++){
    #####: 1110:	if (i != currentPlayer){
    #####: 1111:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1112:	  state->discardCount[i]++;
    #####: 1113:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1114:	}
        -: 1115:      }
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case treasure_map:
        -: 1119:      //search hand for another treasure_map
    #####: 1120:      index = -1;
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	{
    #####: 1123:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1124:	    {
    #####: 1125:	      index = i;
    #####: 1126:	      break;
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (index > -1)
        -: 1130:	{
        -: 1131:	  //trash both treasure cards
    #####: 1132:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1133:	  discardCard(index, currentPlayer, state, 1);
        -: 1134:
        -: 1135:	  //gain 4 Gold cards
    #####: 1136:	  for (i = 0; i < 4; i++)
        -: 1137:	    {
    #####: 1138:	      gainCard(gold, state, 1, currentPlayer);
        -: 1139:	    }
        -: 1140:				
        -: 1141:	  //return success
    #####: 1142:	  return 1;
        -: 1143:	}
        -: 1144:			
        -: 1145:      //no second treasure_map found in hand
    #####: 1146:      return -1;
        -: 1147:    }
        -: 1148:	
    #####: 1149:  return -1;
        -: 1150:}
        -: 1151:
        2: 1152:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1153:{
        -: 1154:	
        -: 1155:  //if card is not trashed, added to Played pile 
        2: 1156:  if (trashFlag < 1)
        -: 1157:    {
        -: 1158:      //add card to played pile
        2: 1159:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1160:      state->playedCardCount++;
        -: 1161:    }
        -: 1162:	
        -: 1163:  //set played card to -1
        2: 1164:  state->hand[currentPlayer][handPos] = -1;
        -: 1165:	
        -: 1166:  //remove card from player's hand
        2: 1167:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        2: 1172:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1173:    {
        -: 1174:      //reduce number of cards in hand
    #####: 1175:      state->handCount[currentPlayer]--;
        -: 1176:    }
        -: 1177:  else 	
        -: 1178:    {
        -: 1179:      //replace discarded card with last card in hand
        2: 1180:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1181:      //set last card to -1
        2: 1182:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1183:      //reduce number of cards in hand
        2: 1184:      state->handCount[currentPlayer]--;
        -: 1185:    }
        -: 1186:	
        2: 1187:  return 0;
        -: 1188:}
        -: 1189:
        1: 1190:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1191:{
        -: 1192:  //Note: supplyPos is enum of choosen card
        -: 1193:	
        -: 1194:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1195:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1196:    {
        1: 1197:      return -1;
        -: 1198:    }
        -: 1199:	
        -: 1200:  //added card for [whoseTurn] current player:
        -: 1201:  // toFlag = 0 : add to discard
        -: 1202:  // toFlag = 1 : add to deck
        -: 1203:  // toFlag = 2 : add to hand
        -: 1204:
    #####: 1205:  if (toFlag == 1)
        -: 1206:    {
    #####: 1207:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1208:      state->deckCount[player]++;
        -: 1209:    }
    #####: 1210:  else if (toFlag == 2)
        -: 1211:    {
    #####: 1212:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1213:      state->handCount[player]++;
        -: 1214:    }
        -: 1215:  else
        -: 1216:    {
    #####: 1217:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1218:      state->discardCount[player]++;
        -: 1219:    }
        -: 1220:	
        -: 1221:  //decrease number in supply pile
    #####: 1222:  state->supplyCount[supplyPos]--;
        -: 1223:	 
    #####: 1224:  return 0;
        -: 1225:}
        -: 1226:
    #####: 1227:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1228:{
        -: 1229:  int i;
        -: 1230:	
        -: 1231:  //reset coin count
    #####: 1232:  state->coins = 0;
        -: 1233:
        -: 1234:  //add coins for each Treasure card in player's hand
    #####: 1235:  for (i = 0; i < state->handCount[player]; i++)
        -: 1236:    {
    #####: 1237:      if (state->hand[player][i] == copper)
        -: 1238:	{
    #####: 1239:	  state->coins += 1;
        -: 1240:	}
    #####: 1241:      else if (state->hand[player][i] == silver)
        -: 1242:	{
    #####: 1243:	  state->coins += 2;
        -: 1244:	}
    #####: 1245:      else if (state->hand[player][i] == gold)
        -: 1246:	{
    #####: 1247:	  state->coins += 3;
        -: 1248:	}	
        -: 1249:    }	
        -: 1250:
        -: 1251:  //add bonus
    #####: 1252:  state->coins += bonus;
        -: 1253:
    #####: 1254:  return 0;
        -: 1255:}
        -: 1256:
        -: 1257:
        -: 1258:
        -: 1259:
        -: 1260:
    #####: 1261:int smithyAction(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -: 1262:
        -: 1263:	int i;
        -: 1264:
        -: 1265:  	//+3 Cards
    #####: 1266:      	for (i = 0; i < 3; i++) {
    #####: 1267:	 	drawCard(currentPlayer, state);
        -: 1268:	}
        -: 1269:			
        -: 1270:      	//discard card from hand
    #####: 1271:      	discardCard(handPos, currentPlayer, state, 1);
        -: 1272:      		
    #####: 1273:	return 0;
        -: 1274:}
        -: 1275:
    #####: 1276:int adventurerAction(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -: 1277:	
    #####: 1278:	int drawntreasure = 0;
        -: 1279:	int temphand[MAX_HAND];
    #####: 1280:	int z = 0;
        -: 1281:	int cardDrawn;
        -: 1282:
    #####: 1283:	while(drawntreasure<2){
    #####: 1284:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1285:	  		shuffle(currentPlayer, state);
        -: 1286:		}
        -: 1287:	
    #####: 1288:		drawCard(currentPlayer, state);
    #####: 1289:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1290:	
    #####: 1291:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1292:	  		drawntreasure--;
        -: 1293:		else{
    #####: 1294:	  		temphand[z]=cardDrawn;
    #####: 1295:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1296:	  		z++;
        -: 1297:		}
        -: 1298:      	}
        -: 1299:     
    #####: 1300:	while(z-1>=0){
    #####: 1301:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1302:		z=z-1;
        -: 1303:      	}
        -: 1304:	
    #####: 1305:	return 0;
        -: 1306:}
        -: 1307:
    #####: 1308:int council_roomAction(int currentPlayer, struct gameState * state, int handPos, int choice1) {
        -: 1309:
        -: 1310:	int i;
        -: 1311:      		
        -: 1312:	//+4 Cards
    #####: 1313:      	for (i = 0; i < 4; i++)
        -: 1314:	{
    #####: 1315:	 	drawCard(currentPlayer, state);
        -: 1316:	}
        -: 1317:			
        -: 1318:	//+1 Buy
    #####: 1319:	state->numBuys = currentPlayer;
        -: 1320:			
        -: 1321:      	//Each other player draws a card
    #####: 1322:      	for (i = 0; i < state->numPlayers; i++)
        -: 1323:	{
    #####: 1324:	 	if ( i != currentPlayer )
        -: 1325:	    	{
    #####: 1326:	    	  	drawCard(i, state);
        -: 1327:	    	}
        -: 1328:	}
        -: 1329:			
        -: 1330:      	//put played card in played card pile
    #####: 1331:      	discardCard(handPos, currentPlayer, state, 0);
        -: 1332:			
    #####: 1333:	return 0;
        -: 1334:}
        -: 1335:
    #####: 1336:int feastAction(int currentPlayer, struct gameState * state, int handPos, int choice1) {
        -: 1337:	
        -: 1338:	int i, x;
        -: 1339:	int temphand[MAX_HAND];
        -: 1340:
        -: 1341:      	//gain card with cost up to 5
        -: 1342:      	//Backup hand
    #####: 1343:      	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1344:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1345:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1346:      	}
        -: 1347:     
        -: 1348:	//Backup hand
        -: 1349:
        -: 1350:     	//Update Coins for Buy
    #####: 1351:      	updateCoins(currentPlayer, state, 5);
    #####: 1352:      	x = 1;//Condition to loop on
    #####: 1353:      	while( x == 1) {//Buy one card
    #####: 1354:		if (supplyCount(choice1, state) <= 0){
        -: 1355:	 		if (DEBUG)
        -: 1356:	    			printf("None of that card left, sorry!\n");
        -: 1357:
        -: 1358:	  		if (DEBUG){
        -: 1359:	    			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1360:	  		}
    #####: 1361:		} else if (state->coins < getCost(choice1)){
    #####: 1362:	  		printf("That card is too expensive!\n");
        -: 1363:
        -: 1364:	  		if (DEBUG){
        -: 1365:	    			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1366:	  		}
        -: 1367:		} else{
        -: 1368:
        -: 1369:	  		if (DEBUG){
        -: 1370:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1371:	  		}
        -: 1372:
    #####: 1373:	  		gainCard(choice1, state, 0, currentPlayer + 1);//Gain the card
    #####: 1374:	  		x = 0;//No more buying cards
        -: 1375:
        -: 1376:	  		if (DEBUG){
        -: 1377:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1378:	  		}
        -: 1379:
        -: 1380:		}
        -: 1381:      	}     
        -: 1382:
        -: 1383:      	//Reset Hand
    #####: 1384:      	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1385:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1386:		temphand[i] = -1;
        -: 1387:      	}
        -: 1388:   
        -: 1389:      			
    #####: 1390:      	return 0;
        -: 1391:}
        -: 1392:
    #####: 1393:int gardensAction(int currentPlayer, struct gameState * state, int handPos, int choice1) {
        -: 1394:
    #####: 1395:	return 1;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399:
